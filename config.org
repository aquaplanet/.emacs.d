* INITIALIZE THE WORLD OF EMACS
  This is my initialization file for Emacs. This file is bootstrapped
  from init.el. Init.el does the following:
  
  - Compare config.el and config.org. If .el is older than .org the
    .org file is tangled to config.el.
  - Load config.el
  - Creates a save hook that tangles this file whenever it is saved.

  The source code for the init.el can be found on
  [http://www.holgerschurig.de/en/emacs-init-tangle/]

* Ideas and visions
** Evil mode is the best
   Vim is better for editing than Emacs, but Emacs is better than Vim
   due to the customizability. What is the best? Both!
** Pleasing to the eyes
   Use a greate theme and don't be affraid of unicode characters -
   they are greate information on a small space and pleasing to the
   eyes.
** Easy to access stuff
   You should not really think how to access something, you should
   just access it.
** Fast
   Emacs should load fast and feel responsive. Fast means also that
   one should quickly be able to make changes to it.

   Example of this is the configuration. Edit config.el and
   restart...Emacs will reload the configuration and do all
   org-mode-babel stuff for me. This might be too slow in the future,
   then make it so that it uses a build system in the CLI (Makefile).

   You should load all modules on-demand when it is needed.
** Inspiration
   [[https://github.com/hlissner/doom-emacs/tree/develop][Doom Emacs]]

* Preparations
** Package sources

#+BEGIN_SRC emacs-lisp :tangle yes
;(require 'package)
(package-initialize)
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
(add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/") t) ; Org-mode's repository
(add-to-list 'package-archives '("marmalade" . "https://marmalade-repo.org/packages/"))
#+END_SRC

Use M-x package-refresh-contents to reload the list of packages after
adding more to package-archives without restarting (or just
restart)...

** use-package
   This is something really cool, a macro from John Wiegley at
   [https://github.com/jwiegley/use-package]. It does all installation
   of packages and gathers the configuration of it close by etc.

   This installation was found on [http://cachestocaches.com/2015/8/getting-started-use-package/].

#+BEGIN_SRC emacs-lisp :tangle yes
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

(eval-when-compile
  (require 'use-package))
;;(require 'diminish)
(require 'bind-key)
#+END_SRC

* Aesthetics
** Theme
#+BEGIN_SRC emacs-lisp :tangle yes
(add-to-list 'custom-theme-load-path "~/.emacs.d/noctilux-theme")
(load-theme 'noctilux t)
#+END_SRC
** Disable startup screen

#+BEGIN_SRC emacs-lisp :tangle yes
(setq inhibit-startup-screen t)
#+END_SRC

** More workarea

#+BEGIN_SRC emacs-lisp :tangle yes
(menu-bar-mode -1)
(tool-bar-mode -1)
#+END_SRC

** Font

* Misc
  What is in here is stuff that I didn't feel needed a big and deep
  caption of its own. Preferably this should be a small caption. If
  something here goes out of hand, move it to its own area.
** Dangerous commands
#+BEGIN_SRC emacs-lisp :tangle yes
(put 'erase-buffer 'disabled nil)
#+END_SRC
** Mac-specifikt
  Make Cmd the meta key to free alt for being able to write [ and {
#+BEGIN_SRC emacs-lisp :tangle yes
(when (eq system-type 'darwin)
 (setq ns-alternate-modifier 'none)
 (setq ns-command-modifier 'meta)
 (setq ns-right-alternate-modifier 'none))
#+END_SRC
** Popup
   Used by auto-complete
   #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package popup
       :ensure t
       :config
       (eval-after-load "cider"
         '(define-key cider-mode-map (kbd "C-c C-d") 'ac-nrepl-popup-doc))
     )
   #+END_SRC
** Auto-complete
   #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package auto-complete
       :ensure t
       :config
       (setq ac-delay 0.0)
       (setq ac-quick-help-delay 0.5)
       (ac-config-default)
     )
   #+END_SRC

   #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package ac-nrepl
       :ensure t
       :config
       (setq nrepl-popup-stacktraces nil)
       (add-hook 'cider-mode-hook 'ac-nrepl-setup)
       (add-hook 'cider-repl-mode-hook 'ac-nrepl-setup)
       (add-to-list 'ac-modes 'cider-mode)
       (add-to-list 'ac-modes 'cider-repl-mode)
     )

   #+END_SRC
** Backup files
   Remove backup files from directories and instead save the to
   ~/.emacs.d/saves. Note that I create the backup directory if it
   doesn't exists...I figured out this myself how to do it in LISP!

   #+BEGIN_SRC emacs-lisp :tangle yes 
     (setq backup-directory-alist '(("." . "~/.emacs.d/saves")))

     (if (not (file-exists-p (cdar backup-directory-alist)))
         (make-directory "~/.emacs.d/saves"))

   #+END_SRC
* HTML/CSS/XML
** Tweaking to nXML-mode
   När du skriver </ så vill du givetvis ha ett avslut.

   #+BEGIN_SRC emacs-lisp :tangle yes
   (setq nxml-slash-auto-complete-flag t) 
   #+END_SRC


** Emmet
Emmet är en fantastiskt mod till många texteditorer som gör det
extremt enkelt att ändra i XML-filer. Eller som de beskriver själva:
"Ett sätt skapa HTML med CSS-selectorer. Skriver du t.ex. nedan och
trycker på C-j så får du det du ser under

html>head>title

#+BEGIN_SRC html :tangle no
<html>
  <head>
    <title>
    </title>
   </head>
</body>
#+END_SRC

Det finns mycket mer till Emmet, men just nu är det vad jag kan. Läs
mer på [[https://github.com/smihica/emmet-mode][Github-sidan för Emmet-mode]].

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package emmet-mode
  :ensure t
  :config
    (add-hook 'sgml-mode-hook 'emmet-mode)
    (add-hook 'css-mode-hook  'emmet-mode)
    (add-hook 'nxml-mode-hook  'emmet-mode)
)
#+END_SRC

* Python
** Indentation
#+BEGIN_SRC emacs-lisp :tangle yes
(add-hook 'python-mode-hook
	  (function (lambda ()
		      (setq indent-tabs-mode nil
			    tab-width 4
			    python-indent-offset 4))))
#+END_SRC
* Magit
  Magit is THE git client for Emacs. It is on Github: [https://github.com/magit/magit].

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package magit
  :bind ("C-x g" . magit-status)
  :ensure t)
#+END_SRC

* Clojure
  My settings is mostly taken from [[http://fgiasson.com/blog/index.php/2014/05/22/my-optimal-gnu-emacs-settings-for-developing-clojure-so-far/][some "optimal" settings blog post
  on the Internet]]
** Paredit
   #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package paredit
       :ensure t
       :config
       (add-hook 'clojure-mode-hook 'paredit-mode)
       (show-paren-mode 1)
     )

   #+END_SRC
** Cider
   IDE for Emacs Clojure, like Slime for Elisp.
   #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package cider
       :ensure t
       :config
       (add-hook 'clojure-mode-hook 'turn-on-eldoc-mode)
     )
   #+END_SRC
** Clojure-mode
   Major mode for Clojure.

   #+BEGIN_SRC emacs-lisp :tangle yes
   (use-package clojure-mode
       :ensure t
   )
   #+END_SRC

** Rainbow-delimiters
   Highlight nested parens, brackets, braces a different color at each
   depth – This is really handy to visually see where you are with
   your parenthesis.

   #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package rainbow-delimiters
       :ensure t
       :config
       (add-hook 'clojure-mode-hook 'rainbow-delimiters-mode)
     )
   #+END_SRC
** Rainbow-mode
   #+BEGIN_SRC emacs-lisp :tangle yes
   (use-package rainbow-mode
       :ensure t
   )
    #+END_SRC
* TODO Stuff to add [1/5]
- [ ] Create an emacs_lisp code block by pressing a key combination
- [ ] Open config.org fast with one key combination
- [ ] Window movement and resizing
- [ ] Sticky sessions - open previous files and directories
- [X] No backup files cluttering the fileystem
