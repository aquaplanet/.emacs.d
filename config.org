* INITIALIZE THE WORLD OF EMACS
  This is my initialization file for Emacs. This file is bootstrapped
  from init.el. Init.el does the following:
  
  - Compare config.el and config.org. If .el is older than .org the
    .org file is tangled to config.el.
  - Load config.el
  - Creates a save hook that tangles this file whenever it is saved.

  The source code for the init.el can be found on
  [http://www.holgerschurig.de/en/emacs-init-tangle/]

* Preparations
** Package sources

#+BEGIN_SRC emacs-lisp :tangle yes
;(require 'package)
(package-initialize)
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
(add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/") t) ; Org-mode's repository
(add-to-list 'package-archives '("marmalade" . "https://marmalade-repo.org/packages/"))
#+END_SRC

Use M-x package-refresh-contents to reload the list of packages after
adding more to package-archives without restarting (or just
restart)...

** use-package
   This is something really cool, a macro from John Wiegley at
   [https://github.com/jwiegley/use-package]. It does all installation
   of packages and gathers the configuration of it close by etc.

   This installation was found on [http://cachestocaches.com/2015/8/getting-started-use-package/].

#+BEGIN_SRC emacs-lisp :tangle yes
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

(eval-when-compile
  (require 'use-package))
(require 'diminish)
(require 'bind-key)
#+END_SRC

* Aesthetics

** Disable startup screen

#+BEGIN_SRC emacs-lisp :tangle yes
(setq inhibit-startup-screen t)
#+END_SRC

** More workarea

#+BEGIN_SRC emacs-lisp :tangle yes
(menu-bar-mode -1)
(tool-bar-mode -1)
#+END_SRC

* Magit
  Magit is THE git client for Emacs. It is on Github: [https://github.com/magit/magit].

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package magit
  :bind ("C-x g" . magit-status)
  :ensure t

)
#+END_SRC

* Org-mode
  This org-mode configuration is picked mostly from [[https://github.com/jwiegley/newartisans/blob/master/posts/2007-08-20-using-org-mode-as-a-day-planner.md][John Wiegley's
  blog newartisans]]. It describes a good way of working.

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package org
  :ensure t
#+END_SRC
** Todos 
   GDT-orden f√∂r todos.
#+BEGIN_SRC emacs-lisp :tangle yes
  :config
    (setq org-todo-keywords
          '((sequence "TODO(t)" "DELEGATED(l)" "STARTED(s)" "WAITING(w)" "|"
                      "DONE(d)" "CANCELLED(c)" "DEFERRED(f)")))
#+END_SRC
*** CANCELLED For elisp reasons Fast configuration of todo states.
    Org mode has a better way to do this, but this shows how to work with prefix maps.
    
    This makes it easy to change states of todo items.

    | Key     | Assign state to item |
    |---------+----------------------|
    | C-c x d | DONE                 |
    | C-c x x | CANCELLED            |
    | C-c x f | DEFERRED             |
    | C-c x l | DELEGATE             |
    | C-c x s | STARTED              |
    | C-c x w | WAITING              |

    The code below works as follows. Create a prefix key map called
    org-todo-state-map and assign it C-c x keyboard command. Then add
    the various commands to the new keymap as lambda functions.

#+BEGIN_SRC emacs-lisp :tangle yes
  :init (define-prefix-command 'org-todo-state-map)
  :bind (("C-c x" . org-todo-state-map))
  :config
    (define-key org-todo-state-map "d"
       #'(lambda nil (interactive) (org-todo "DONE")))
    (define-key org-todo-state-map "x"
       #'(lambda nil (interactive) (org-todo "CANCELLED")))
    (define-key org-todo-state-map "f"
       #'(lambda nil (interactive) (org-todo "DEFERRED")))
    (define-key org-todo-state-map "l"
       #'(lambda nil (interactive) (org-todo "DELEGATED")))
    (define-key org-todo-state-map "s"
       #'(lambda nil (interactive) (org-todo "STARTED")))
    (define-key org-todo-state-map "w"
       #'(lambda nil (interactive) (org-todo "WAITING")))
#+END_SRC
** CANCELLED Capture 
#+BEGIN_SRC emacs-lisp :tangle yes
  :bind (("C-c c" . org-capture))
  :config
  (setq org-default-notes-file "notes.org")
  (setq org-capture-templates
        '(("t")))



#+END_SRC
   
** Agenda
   Access agenda by C-c a
#+BEGIN_SRC emacs-lisp :tangle yes
  :bind (("C-c a" . org-agenda))
#+END_SRC

   Put the files in ~/org.
#+BEGIN_SRC emacs-lisp :tangle yes
  :config
    (setq org-directory "~/org"
          org-agenda-files (list org-directory))
#+END_SRC

** End org mode
#+BEGIN_SRC emacs-lisp :tangle yes

#+END_SRC


#+BEGIN_SRC emacs-lisp :tangle yes
)
#+END_SRC
* TODO Stuff to add [0/3]
- [ ] Create an emacs_lisp code block by pressing a key combination
- [ ] Open config.org fast with one key combination
